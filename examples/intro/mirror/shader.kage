//kage:unit pixels
package main

var MirrorAlphaMult float // uniform: reflection opacity multiplier
var VertDisplacement int  // uniform: displacement towards the center

func Fragment(targetCoords vec4, sourceCoords vec2, _ vec4) vec4 {
	originY := imageSrc0Origin().y
	relativeSrcY := sourceCoords.y - originY

	// compute top contribution
	uprightColor := imageSrc0At(vec2(sourceCoords.x, relativeSrcY*2 + originY - float(VertDisplacement)))
	uprightColor *= whenLessThan(relativeSrcY, imageSrc0Size().y/2)
	
	// compute bottom contribution
	adjustedY := (relativeSrcY - imageSrc0Size().y/2)*2
	invertedY := imageSrc0Size().y - adjustedY
	samplingCoords := vec2(sourceCoords.x, invertedY + originY - float(VertDisplacement))
	mirrorColor := imageSrc0At(samplingCoords)*MirrorAlphaMult
	mirrorColor *= whenGreaterThan(relativeSrcY, imageSrc0Size().y/2)
	
	// return the sum of contributions
	return uprightColor + mirrorColor
}

// Returns 1 if a < b, 0 otherwise.
func whenLessThan(a, b float) float {
	return 1 - step(b, a)
}

// Returns 1 if a > b, 0 otherwise.
func whenGreaterThan(a, b float) float {
	return 1 - step(a, b)
}
