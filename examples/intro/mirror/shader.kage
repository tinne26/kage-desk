package main

var TargetRect vec4       // uniform: min x, min y, max x, max y
var MirrorAlphaMult float // uniform: reflection opacity multiplier
var VertDisplacement int  // uniform: displacement towards the center

func Fragment(position vec4, _ vec2, _ vec4) vec4 {
	// prepare helper information
	relativePos := vec2(position.x - TargetRect[0], position.y - TargetRect[1])
	rectHeight := TargetRect[3] - TargetRect[1]
	yCenter := rectHeight/2

	// apply displacement
	relativePos.y += float(VertDisplacement)*sign(relativePos.y - yCenter)

	// top part (unmodified creature)
	mainColor := imageColorAtPixel(relativePos)

	// bottom part (inverted and alpha-adjusted creature)
	mirrorPosition := vec2(relativePos.x, rectHeight - relativePos.y)
	mirrorColor := imageColorAtPixel(mirrorPosition)*MirrorAlphaMult

	// compose the result
	return mainColor + mirrorColor
}

func imageColorAtPixel(pixelCoords vec2) vec4 {
	sizeInPixels := imageSrcTextureSize()
	originInTexels, _ := imageSrcRegionOnTexture()
	adjustedTexelCoords := pixelCoords/sizeInPixels + originInTexels
	return imageSrc0At(adjustedTexelCoords)
}
