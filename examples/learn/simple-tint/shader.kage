//kage:unit pixels
package main

var Cursor vec2

func Fragment(targetCoords vec4, sourceCoords vec2, _ vec4) vec4 {
	// sample the image (could use imageSrc0At(), don't worry about it)
	color := bilinearSampling(sourceCoords, fwidth(sourceCoords))

	// black and white program. move mouse horizontally to compare methods
	if Cursor.x < normDstCoords(targetCoords).x { // leave right side intact
		return color
	} else { // tint left side based on lightness (cheap version)	
		lightness := dot(color.rgb, vec3(0.299, 0.587, 0.114))
		lightness  = pow(lightness, 1.0/2.0) // rescaling for better readability
		return vec4(vec3(1, 0.9, 0)*lightness, max(color.a, lightness))
	}
}

func bilinearSampling(coords, unit vec2) vec4 {
	tl := imageSrc0At(coords - unit/2.0)
	tr := imageSrc0At(coords + vec2(+unit.x/2.0, -unit.y/2.0))
	bl := imageSrc0At(coords + vec2(-unit.x/2.0, +unit.y/2.0))
	br := imageSrc0At(coords + unit/2.0)
	delta  := min(fract(coords + unit/2.0), unit)/unit
	top    := mix(tl, tr, delta.x)
	bottom := mix(bl, br, delta.x)
	return mix(top, bottom, delta.y)
}

func normDstCoords(targetCoords vec4) vec2 {
	return (targetCoords.xy - imageDstOrigin())/imageDstSize()
}
