//kage:unit pixels
package main

var MouseButtons int // kage-desk/display built-in uniform

func Fragment(targetCoords vec4, _ vec2, _ vec4) vec4 {
	center := imageDstOrigin() + imageDstSize()/2.0
	sdf    := triangleSDF(targetCoords.xy - center, vec2(0, -188), vec2(-132, 88), vec2(110, 144))
	
	output := vec4(1)*clamp(-sdf, 0, 1) // by default the program returns just this
	sdfviz := colorwave(sdf) // can ignore, fancier display if you click the mouse
	return AB01(output, sdfviz, whenMouseButton())
}

func triangleSDF(coords, vertexA, vertexB, vertexC vec2) float {
	offsetA := coords - vertexA
	offsetB := coords - vertexB
	offsetC := coords - vertexC 
	offsetAB := vertexB - vertexA
	offsetBC := vertexC - vertexB
	offsetCA := vertexA - vertexC

	aba := offsetA - offsetAB*clamp(dot(offsetA, offsetAB)/dot(offsetAB, offsetAB), 0, 1)
	bcb := offsetB - offsetBC*clamp(dot(offsetB, offsetBC)/dot(offsetBC, offsetBC), 0, 1)
	cac := offsetC - offsetCA*clamp(dot(offsetC, offsetCA)/dot(offsetCA, offsetCA), 0, 1)

	s := sign(offsetAB.x*offsetCA.y - offsetAB.y*offsetCA.x)
	dist := min3(
		vec2(dot(aba, aba), s*(offsetA.x*offsetAB.y - offsetA.y*offsetAB.x)),
		vec2(dot(bcb, bcb), s*(offsetB.x*offsetBC.y - offsetB.y*offsetBC.x)),
		vec2(dot(cac, cac), s*(offsetC.x*offsetCA.y - offsetC.y*offsetCA.x)),
	)
	return -sqrt(dist.x)*sign(dist.y)
}

func min3(a, b, c vec2) vec2 {
	return min(min(a, b), c)
}

// --- fancier interactivity ---

func whenMouseButton() float {
	return 1.0 - step(float(MouseButtons), 0.0)
}

// Returns a if selector is 0, b if selector is 1.
func AB01(a, b vec4, selector float) vec4 {
	return a*(1.0 - selector) + b*selector
}

func colorwave(sdf float) vec4 {
	mid := vec4(0.156, 0.682, 0.501, 1.0)
	dark, light := vec4(0.172, 0.447, 0.556, 1.0), vec4(0.368, 0.788, 0.384, 1.0)
	out := mix(mid, dark , 0.85 + 0.5*sin(clamp(pow(sdf*+0.25, 1.3), 0, 1_000_000)))
	in  := mix(mid, light, 0.85 + 0.5*sin(clamp(pow(sdf*-0.25, 1.4), 0, 1_000_000)))
	return out*clamp(+sdf, 0, 1) + in*clamp(-sdf, 0, 1)
}

func rgb(r, g, b int) vec4 {
	return vec4(float(r)/255.0, float(g)/255.0, float(b)/255.0, 1.0)
}
